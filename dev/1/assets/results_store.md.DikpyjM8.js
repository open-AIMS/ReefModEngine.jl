import{_ as s,c as t,o as a,ai as i}from"./chunks/framework.BXUYAfi3.js";const u=JSON.parse('{"title":"Results","description":"","frontmatter":{},"headers":[],"relativePath":"results_store.md","filePath":"results_store.md","lastUpdated":null}'),l={name:"results_store.md"};function o(n,e,r,d,p,c){return a(),t("div",null,[...e[0]||(e[0]=[i('<h1 id="Results" tabindex="-1">Results <a class="header-anchor" href="#Results" aria-label="Permalink to &quot;Results {#Results}&quot;">​</a></h1><p>Reefmod Engine outputs and scenario information are recorded from the ReefMod Engine API after each scenario(s) run, not before.</p><h2 id="Result-Store" tabindex="-1">Result Store <a class="header-anchor" href="#Result-Store" aria-label="Permalink to &quot;Result Store {#Result-Store}&quot;">​</a></h2><p>The result stores holds all model outputs from both counterfactual and interventions. Information about scenarios is stored in the scenario field of the result store. The reps field the result store is exactly have the number of scenarios contained in the scenario Dataframe and result YAX Dataset holdering outcomes. This is because the API forces counterfactual to be evaluated with every intervention run.</p><p>Model inputs are stored in the <code>results</code> field of the store and contains the following variables:</p><ul><li><p><code>total_cover</code> ~ Total Coral Cover (% of total reef area)</p></li><li><p><code>dhw</code> ~ Degree Heating Weeks (°C weeks)</p></li><li><p><code>dhw_mortality</code> ~ DHW Mortality (% of population*)</p></li><li><p><code>cyc_mortality</code> ~ Cyclone Mortality (% of population*)</p></li><li><p><code>cyc_cat</code> ~ Cyclone Category</p></li><li><p><code>cots</code> ~ COTS Population (per ha)</p></li><li><p><code>cots_mortality</code> ~ Mortality caused by COTS (% of population*)</p></li><li><p><code>total_taxa_cover</code> ~ Total Species Cover (% of total reef area)</p></li></ul><p>*not formally confirmed</p><h2 id="Usage" tabindex="-1">Usage <a class="header-anchor" href="#Usage" aria-label="Permalink to &quot;Usage {#Usage}&quot;">​</a></h2><p>A side effect of the C++ API structure means that each intervention scenario must be executed separately (<strong>Intervention scenario</strong> meaning a run with a specific intervention strategy, not referring to runs with differing environmental inputs called repeats).</p><ol><li>Before storing any results, create the result store.</li></ol><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result_store </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ResultStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(start_year, end_year)</span></span></code></pre></div><ol><li>Perform model run</li></ol><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span></span></code></pre></div><ol><li>Store results</li></ol><p><code>reps</code> is the number of repeats executed in the run.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">concat_results!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result_store, start_year, end_year, reps)</span></span></code></pre></div><h2 id="Saving-Results" tabindex="-1">Saving Results <a class="header-anchor" href="#Saving-Results" aria-label="Permalink to &quot;Saving Results {#Saving-Results}&quot;">​</a></h2><p>Results can be saved using <code>save_result_store</code>.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">save_result_store</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dir_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result_store</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>The results directory will contain two files <code>results.nc</code> and <code>scenarios.csv</code>.</p><p>The NetCDF file contains all the model inputs and outputs described above and the scenarios csv file details the intervention parameters used in the model runs and is in the same order as the scenario dimension in the netcdf fie.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>If there is already a scenarios Dataframe in the directory being saved to it will be overwritten</p></div>',22)])])}const k=s(l,[["render",o]]);export{u as __pageData,k as default};
